// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package metser

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson80d2ff96DecodeGithubComJeromefroeMetser(in *jlexer.Lexer, out *MetricUnion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = Type(in.Int8())
		case "ID":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				out.ID = in.Bytes()
			}
		case "CounterVal":
			out.CounterVal = int64(in.Int64())
		case "BatchTimerVal":
			if in.IsNull() {
				in.Skip()
				out.BatchTimerVal = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BatchTimerVal = make([]float64, 0, 8)
				} else {
					out.BatchTimerVal = []float64{}
				}
				for !in.IsDelim(']') {
					var v2 float64
					v2 = float64(in.Float64())
					out.BatchTimerVal = append(out.BatchTimerVal, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GaugeVal":
			out.GaugeVal = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80d2ff96EncodeGithubComJeromefroeMetser(out *jwriter.Writer, in MetricUnion) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.Int8(int8(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.Base64Bytes(in.ID)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CounterVal\":")
	out.Int64(int64(in.CounterVal))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"BatchTimerVal\":")
	if in.BatchTimerVal == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.BatchTimerVal {
			if v5 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(v6))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"GaugeVal\":")
	out.Float64(float64(in.GaugeVal))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricUnion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80d2ff96EncodeGithubComJeromefroeMetser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricUnion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80d2ff96EncodeGithubComJeromefroeMetser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricUnion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80d2ff96DecodeGithubComJeromefroeMetser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricUnion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80d2ff96DecodeGithubComJeromefroeMetser(l, v)
}
func easyjson80d2ff96DecodeGithubComJeromefroeMetser1(in *jlexer.Lexer, out *Gauge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				out.ID = in.Bytes()
			}
		case "Value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80d2ff96EncodeGithubComJeromefroeMetser1(out *jwriter.Writer, in Gauge) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.Base64Bytes(in.ID)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Value\":")
	out.Float64(float64(in.Value))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gauge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80d2ff96EncodeGithubComJeromefroeMetser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gauge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80d2ff96EncodeGithubComJeromefroeMetser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gauge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80d2ff96DecodeGithubComJeromefroeMetser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gauge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80d2ff96DecodeGithubComJeromefroeMetser1(l, v)
}
func easyjson80d2ff96DecodeGithubComJeromefroeMetser2(in *jlexer.Lexer, out *BatchTimer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				out.ID = in.Bytes()
			}
		case "Values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Values = make([]float64, 0, 8)
				} else {
					out.Values = []float64{}
				}
				for !in.IsDelim(']') {
					var v11 float64
					v11 = float64(in.Float64())
					out.Values = append(out.Values, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80d2ff96EncodeGithubComJeromefroeMetser2(out *jwriter.Writer, in BatchTimer) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.Base64Bytes(in.ID)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Values\":")
	if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in.Values {
			if v14 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(v15))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchTimer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80d2ff96EncodeGithubComJeromefroeMetser2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchTimer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80d2ff96EncodeGithubComJeromefroeMetser2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchTimer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80d2ff96DecodeGithubComJeromefroeMetser2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchTimer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80d2ff96DecodeGithubComJeromefroeMetser2(l, v)
}
func easyjson80d2ff96DecodeGithubComJeromefroeMetser3(in *jlexer.Lexer, out *Counter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				out.ID = in.Bytes()
			}
		case "Value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80d2ff96EncodeGithubComJeromefroeMetser3(out *jwriter.Writer, in Counter) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.Base64Bytes(in.ID)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Value\":")
	out.Int64(int64(in.Value))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Counter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80d2ff96EncodeGithubComJeromefroeMetser3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Counter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80d2ff96EncodeGithubComJeromefroeMetser3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Counter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80d2ff96DecodeGithubComJeromefroeMetser3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Counter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80d2ff96DecodeGithubComJeromefroeMetser3(l, v)
}
