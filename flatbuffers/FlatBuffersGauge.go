// automatically generated by the FlatBuffers compiler, do not modify

package flatbuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FlatBuffersGauge struct {
	_tab flatbuffers.Table
}

func GetRootAsFlatBuffersGauge(buf []byte, offset flatbuffers.UOffsetT) *FlatBuffersGauge {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlatBuffersGauge{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FlatBuffersGauge) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlatBuffersGauge) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FlatBuffersGauge) ID(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *FlatBuffersGauge) IDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FlatBuffersGauge) IDBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FlatBuffersGauge) Value() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FlatBuffersGauge) MutateValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func FlatBuffersGaugeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FlatBuffersGaugeAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ID), 0)
}
func FlatBuffersGaugeStartIDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FlatBuffersGaugeAddValue(builder *flatbuffers.Builder, Value float64) {
	builder.PrependFloat64Slot(1, Value, 0.0)
}
func FlatBuffersGaugeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
